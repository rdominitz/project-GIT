using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Server;
using Entities;
using Constants;
using System.Collections.Generic;

namespace ServerLogicTests
{
    [TestClass]
    public class GetAnswers
    {
        private IServer _server;

        [TestInitialize]
        public void TestInitialize()
        {
            _server = new ServerImpl(new FakeMedTrainDBContext());
            _server.login("defaultadmin@gmail.com", "password");
            _server.addSubject(Users.USER_UNIQUE_INT, "subject");
            _server.addTopic(Users.USER_UNIQUE_INT, "subject", "topic");
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
        }

        [TestMethod]
        public void getAnswersSingleQuestion()
        {
            _server.getAutoGeneratedQuesstion(Users.USER_UNIQUE_INT, "subject", "topic");
            Tuple<string, Question> t = _server.getNextQuestion(Users.USER_UNIQUE_INT);
            _server.answerAQuestion(Users.USER_UNIQUE_INT, t.Item2.QuestionId, true, 5, new List<string>(), new List<int>());
            Tuple<string, List<Question>> t2 = _server.getAnsweres(Users.USER_UNIQUE_INT);
            Assert.IsTrue(t2.Item1.Equals(Replies.SUCCESS));
            Assert.IsTrue(t2.Item2.Count == 1);
        }

        [TestMethod]
        public void getAnswersTwoQuestionsAnswerAfterEachQuestion()
        {
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
            _server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 2, true);
            Tuple<string, Question> t = _server.getNextQuestion(Users.USER_UNIQUE_INT);
            _server.answerAQuestion(Users.USER_UNIQUE_INT, t.Item2.QuestionId, true, 5, new List<string>(), new List<int>());
            Tuple<string, List<Question>> t2 = _server.getAnsweres(Users.USER_UNIQUE_INT);
            Assert.IsTrue(t2.Item1.Equals(Replies.SUCCESS));
            Assert.IsTrue(t2.Item2.Count == 1);
            t = _server.getNextQuestion(Users.USER_UNIQUE_INT);
            _server.answerAQuestion(Users.USER_UNIQUE_INT, t.Item2.QuestionId, true, 5, new List<string>(), new List<int>());
            t2 = _server.getAnsweres(Users.USER_UNIQUE_INT);
            Assert.IsTrue(t2.Item1.Equals(Replies.SUCCESS));
            Assert.IsTrue(t2.Item2.Count == 1);
        }

        [TestMethod]
        public void getAnswersTwoQuestionsAnsweraAtTheEnd()
        {
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
            _server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 2, false);
            Tuple<string, Question> t = _server.getNextQuestion(Users.USER_UNIQUE_INT);
            _server.answerAQuestion(Users.USER_UNIQUE_INT, t.Item2.QuestionId, true, 5, new List<string>(), new List<int>());
            t = _server.getNextQuestion(Users.USER_UNIQUE_INT);
            _server.answerAQuestion(Users.USER_UNIQUE_INT, t.Item2.QuestionId, true, 5, new List<string>(), new List<int>());
            Tuple<string, List<Question>>  t2 = _server.getAnsweres(Users.USER_UNIQUE_INT);
            Assert.IsTrue(t2.Item1.Equals(Replies.SUCCESS));
            Assert.IsTrue(t2.Item2.Count == 2);
        }

        [TestMethod]
        public void getAnswersUserNotLoggedIn()
        {
            _server.getAutoGeneratedQuesstion(Users.USER_UNIQUE_INT, "subject", "topic");
            Tuple<string, Question> t = _server.getNextQuestion(Users.USER_UNIQUE_INT);
            _server.answerAQuestion(Users.USER_UNIQUE_INT, t.Item2.QuestionId, true, 5, new List<string>(), new List<int>());
            _server.logout(Users.USER_UNIQUE_INT);
            Tuple<string, List<Question>> t2 = _server.getAnsweres(Users.USER_UNIQUE_INT);
            Assert.IsFalse(t2.Item1.Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAnswersWrongUserId()
        {
            _server.getAutoGeneratedQuesstion(Users.USER_UNIQUE_INT, "subject", "topic");
            Tuple<string, Question> t = _server.getNextQuestion(Users.USER_UNIQUE_INT);
            _server.answerAQuestion(Users.USER_UNIQUE_INT, t.Item2.QuestionId, true, 5, new List<string>(), new List<int>());
            Tuple<string, List<Question>> t2 = _server.getAnsweres(Users.USER_UNIQUE_INT - 1);
            Assert.IsFalse(t2.Item1.Equals(Replies.SUCCESS));
        }
    }
}
