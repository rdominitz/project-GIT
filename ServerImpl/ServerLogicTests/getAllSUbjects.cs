using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Server;
using Entities;
using Constants;
using System.Collections.Generic;
using System.Threading;
using System.Data.Entity.Validation;

namespace ServerLogicTests
{
    [TestClass]
    public class getAllSUbjects
    {
        private IServer _server;

        [TestInitialize]
        public void TestInitialize()
        {
            _server = new ServerImpl(new MedTrainDBContext());
            Thread.Sleep(30000);
        }

        [TestMethod]
        public void getAllSubjects()
        {
            _server.login("defaultadmin@gmail.com", "password");
            for (int i = 0; i < 100; i++)
            {
                try
                {
                    Assert.IsTrue(_server.getAutoGeneratedQuesstion(100000, "Chest x-Rays", "Cavitary Lesion").Equals(Replies.SUCCESS));
                    Question q = _server.getNextQuestion(100000).Item2;
                    Assert.IsTrue(q != null);
                    Assert.IsTrue(_server.AnswerAQuestion(100000, q.QuestionId, true, 4, new List<string>(), new List<int>()).Equals(Replies.SHOW_ANSWER));
                    Thread.Sleep(2000);
                }
                catch (DbEntityValidationException e)
                {
                    foreach (var eve in e.EntityValidationErrors)
                    {
                        Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                            eve.Entry.Entity.GetType().Name, eve.Entry.State);
                        foreach (var ve in eve.ValidationErrors)
                        {
                            string str = "property: " + ve.PropertyName + ", value: " + eve.Entry.CurrentValues.GetValue<object>(ve.PropertyName) + ", error: " + ve.ErrorMessage;
                            Console.WriteLine("- Property: \"{0}\", Value: \"{1}\", Error: \"{2}\"",
                                ve.PropertyName,
                                eve.Entry.CurrentValues.GetValue<object>(ve.PropertyName),
                                ve.ErrorMessage);
                        }
                    }
                }
            }
        }
    }
}
