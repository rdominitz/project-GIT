using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using Constants;
using Server;
using Entities;

namespace ServerLogicTests
{
    [TestClass]
    public class GetAutoGeneratedTest
    {
        private IServer _server;

        [TestInitialize]
        public void TestInitialize()
        {
            _server = new ServerImpl(new FakeMedTrainDBContext());
            _server.login("defaultadmin@gmail.com", "password");
            _server.addSubject(Users.USER_UNIQUE_INT, "subject");
            _server.addTopic(Users.USER_UNIQUE_INT, "subject", "topic");
        }

        [TestMethod]
        public void getAutoGeneratedTestUserNotLoggedIn()
        {
            int userId = _server.register("user@gmail.com", "password", Users.medicalTrainingLevels[0], "fn", "ln").Item2;
            Assert.IsFalse(_server.getAutoGeneratedTest(userId, "subject", "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestNonExistingSubject()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "no_subject", "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestNonExistingTopic()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "no_topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestNoQuestions()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestWrongUserId()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(99999, "subject", "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestSubjectIsNull()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, null, "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestSubjectIsNullString()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "null", "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestSubjectIsEmpty()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "", "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestTopicIsNull()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", null, 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestTopicIsNullString()
        {
            _server.login("defaultadmin@gmail.com", "password");
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "null", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestTopicIsEmpty()
        {
            _server.login("defaultadmin@gmail.com", "password");
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestOneQuestionAnswerEveryTime()
        {
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
            Assert.IsTrue(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 1, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestOneQuestionAnswerAtEnd()
        {
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
            Assert.IsTrue(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 1, false).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestNotEnoughQuestions()
        {
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 2, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestZeroQuestions()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 0, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestNegativeNumberOfQuestions()
        {
            Assert.IsFalse(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", -1, true).Equals(Replies.SUCCESS));
        }
        
        [TestMethod]
        public void getAutoGeneratedTestTwoQuestionsAnswerEveryTime()
        {
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", true, "", new List<string>());
            Assert.IsTrue(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 2, true).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedTestTwoQuestionsAnswerAtEnd()
        {
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", false, "", new List<string>() { "topic" });
            _server.addQuestion(Users.USER_UNIQUE_INT, "subject", true, "", new List<string>());
            Assert.IsTrue(_server.getAutoGeneratedTest(Users.USER_UNIQUE_INT, "subject", "topic", 2, false).Equals(Replies.SUCCESS));
        }
    }
}
