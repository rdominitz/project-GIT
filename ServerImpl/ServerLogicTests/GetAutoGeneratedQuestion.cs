using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Server;
using Entities;
using Constants;
using System.Collections.Generic;

namespace ServerLogicTests
{
    [TestClass]
    public class GetAutoGeneratedQuestion
    {
        private IServer _server;

        [TestInitialize]
        public void TestInitialize()
        {
            _server = new ServerImpl(new FakeMedTrainDBContext());
            _server.login("defaultadmin@gmail.com", "password");
            _server.addSubject(100000, "subject");
            _server.addTopic(100000, "subject", "topic");
        }

        [TestMethod]
        public void getAutoGeneratedQuestionUserNotLoggedIn()
        {
            int userId = _server.register("user@gmail.com", "password", Users.medicalTrainingLevels[0], "fn", "ln").Item2;
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(userId, "subject", "topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionNonExistingSubject()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "no_subject", "topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionNonExistingTopic()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "subject", "no_topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionNoQuestions()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "subject", "topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionWrongUserId()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(99999, "subject", "topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionSubjectIsNull()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, null, "topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionSubjectIsNullString()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "null", "topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionSubjectIsEmpty()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "", "topic").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionTopicIsNull()
        {
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "subject", null).Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionTopicIsNullString()
        {
            _server.login("defaultadmin@gmail.com", "password");
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "subject", "null").Equals(Replies.SUCCESS));
        }

        [TestMethod]
        public void getAutoGeneratedQuestionTopicIsEmpty()
        {
            _server.login("defaultadmin@gmail.com", "password");
            Assert.IsFalse(_server.getAutoGeneratedQuesstion(100000, "subject", "").Equals(Replies.SUCCESS));
        }
        
        // add question and get it
        [TestMethod]
        public void getAutoGeneratedQuestionSuccessfully()
        {
            _server.login("defaultadmin@gmail.com", "password");
            _server.addQuestion(100000, "subject", true, "", new List<string>() { "topic" });
            Assert.IsTrue(_server.getAutoGeneratedQuesstion(100000, "subject", "topic").Equals(Replies.SUCCESS));
        }
    }
}
