using communication.Core;
using communication.Models.GetTest;
using Constants;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace communication.Controllers
{
    public class GetTestController : Controller
    {
        [HttpGet]
        public ActionResult Index(string message)
        {
            HttpCookie cookie = Request.Cookies["userId"];
            if (cookie == null)
            {
                return RedirectToAction("Index", "Login", new { message = "you were not logged in. please log in and then try again" });
            }
            removeCookie("TestId");
            removeCookie("groupName");
            ViewBag.message = message;
            return View(getData());
        }

        List<GetTestData> getData()
        {
            List<GetTestData> data = new List<GetTestData>();
            List<string> subjects = ServerWiring.getInstance().getAllSubjects();
            foreach (string subject in subjects)
            {
                List<string> list = ServerWiring.getInstance().getSubjectTopicsGetAQuestion(subject);
                list.Remove(Constants.Topics.NORMAL);
                data.Add(new GetTestData(subject, list));
            }
            return data;
        }

        [HttpGet]
        public List<string> SubjectChanged(string subject)
        {
            return ServerWiring.getInstance().getSubjectTopicsGetAQuestion(subject);

        }

        [HttpPost]
        public ActionResult Submit(string subject, string[] topics, int numberOfQuestions, string whenToShowAnswer)
        {

            HttpCookie cookie = Request.Cookies["userId"];
            if (cookie == null)
            {
                return RedirectToAction("Index", "Login", new { message = "you were not logged in. please log in and then try again" });
            }
            ViewBag.subject = subject;
            ViewBag.topics = topics;
            ViewBag.numberOfQuestions = numberOfQuestions;
            bool flag = false;
            if (whenToShowAnswer.Equals("AfterEachQuestion"))
            {
                flag = true;
            }
            List<string> topicsList = new List<string>();
            topicsList = topics.ToList();

            string ans = ServerWiring.getInstance().getAutoGeneratedTest(Convert.ToInt32(cookie.Value), subject, topicsList, numberOfQuestions, flag);
            if (ans == Replies.SUCCESS)
            {
                return RedirectToAction("Index", "AnswerQuestion");
            }
            

            return RedirectToAction("Index","GetTest", new { message = ans });
        }

        private void removeCookie(string s)
        {
            if (Request.Cookies[s] != null)
            {
                var c = new HttpCookie(s);
                c.Expires = DateTime.Now.AddDays(-1);
                Response.Cookies.Add(c);
            }
        }
    }
}